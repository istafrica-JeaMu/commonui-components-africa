/// <reference types="vitest" />

import { resolve } from 'path';
import tailwindcss from '@tailwindcss/vite';
import vue from '@vitejs/plugin-vue';
import { visualizer } from 'rollup-plugin-visualizer';
import { defineConfig } from 'vite';

export default defineConfig({
  optimizeDeps: {
    exclude: ['vue', 'primevue', 'tailwindcss-primeui'],
  },
  plugins: [vue(), tailwindcss(), visualizer({ template: 'network' })],
  build: {
    copyPublicDir: false,
    cssCodeSplit: false,
    lib: {
      entry: resolve(__dirname, 'src/index.ts'),
      name: 'CommonUIComponentsAfrica',
      formats: ['es', 'cjs'], // ES modules and CommonJS
      fileName: (format, name) => `${name}.${format}.js`,
    },
    rollupOptions: {
      // external modules won't be bundled into your library
      external: [
        'vue',
        '@heroicons+vue',
        '@heroicons/vue',
        '@headlessui/vue',
        'primevue',
        'tailwindcss-primeui',
        // /node_modules\/primevue/,
      ], // not every external has a global
      treeshake: false,
      output: {
        compact: true,
        preserveModules: true,
        preserveModulesRoot: 'src',
        inlineDynamicImports: false,
        assetFileNames: 'assets/[name][extname]',
        chunkFileNames: 'chunks/[name][extname]',
        // disable warning on src/index.ts using both default and named export
        exports: 'named',
        // Provide global variables to use in the UMD build
        // for externalized deps (not useful if 'umd' is not in lib.formats)
        globals: {
          vue: 'Vue',
        },
      },
    },
    emptyOutDir: false, // to retain the types folder generated by tsc
  },
  resolve: {
    alias: {
      '@': resolve('./src'),
      '@tests': resolve('./tests'),
    },
  },
}); 